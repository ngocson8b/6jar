'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Field = exports.modeled = exports.modelReducer = exports.createModelReducer = undefined;

var _modelReducer = require('../reducers/model-reducer');

var _modeledEnhancer = require('../enhancers/modeled-enhancer');

var _fieldComponent = require('../components/field-component');

var _toPath = require('../utils/to-path');

var _toPath2 = _interopRequireDefault(_toPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function immutableGet(state, path, defaultValue) {
  try {
    return state.getIn(path, defaultValue);
  } catch (error) {
    throw new Error('Unable to retrieve path \'' + path.join('.') + '\' in state. Please make sure that state is an Immutable instance.');
  }
}

function immutableSet(state, path, value) {
  try {
    return state.setIn(path, value);
  } catch (error) {
    throw new Error('Unable to set path \'' + path.join('.') + '\' in state. Please make sure that state is an Immutable instance.');
  }
}

function immutableGetFromState(state, modelString) {
  var path = (0, _toPath2.default)(modelString);

  return path.reduce(function (subState, subPath) {
    // Current subState is immutable
    if ('get' in subState) {
      return subState.get(subPath);
    }

    // Current subState is a plain object/array
    return subState[subPath];
  }, state);
}

var ImmutableField = (0, _fieldComponent.createFieldClass)(undefined, {
  getter: immutableGetFromState
});

var modelReducer = (0, _modelReducer.createModeler)(immutableGet, immutableSet);
var modelReducerEnhancer = (0, _modeledEnhancer.createModelReducerEnhancer)(modelReducer);

function createModelReducer() {
  console.warn('The createModelReducer() function is deprecated (renamed). ' + 'Please use modelReducer().');

  return modelReducer.apply(undefined, arguments);
}

exports.createModelReducer = createModelReducer;
exports.modelReducer = modelReducer;
exports.modeled = modelReducerEnhancer;
exports.Field = ImmutableField;